{"remainingRequest":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\gksmf\\shopping_mall\\frontend\\src\\components\\products\\DetailsPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\src\\components\\products\\DetailsPage.vue","mtime":1582166423336},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  data: function () {\r\n      return {\r\n        product: {\r\n          price:0\r\n        },\r\n        user: {},\r\n        likes: [],\r\n        basket: [],\r\n        likeTrue: null,\r\n        basketTrue: null,\r\n        S:'s', M:'m', L:'l', XL:'xl', Free:'free',\r\n        mySItemsNum: 0, myMItemsNum: 0, myLItemsNum: 0, myXLItemsNum: 0, myFreeItemsNum: 0,\r\n        SSaleTrue: false, MSaleTrue: false, LSaleTrue: false, XLSaleTrue: false, FreeSaleTrue: false,\r\n        //DB에 저장된 갯수 담을 변수\r\n        SItemsNum:null, MItemsNum:null, LItemsNum:null, XLItemsNum:null, FreeItemsNum:null\r\n      }\r\n  },\r\n  computed: {\r\n      isAdmin() {\r\n          return this.$store.getters.isAdmin;\r\n      },\r\n      token() {\r\n        return this.$store.getters.token;\r\n      },\r\n      priceSum() {\r\n        return (Number(this.product.price) * (this.mySItemsNum + this.myMItemsNum + this.myLItemsNum + this.myXLItemsNum + this.myFreeItemsNum)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n      },\r\n      beforeBuy() {\r\n        let select = this.mySItemsNum != 0 || this.myMItemsNum != 0 || this.myLItemsNum != 0 || this.myXLItemsNum != 0 || this.myFreeItemsNum != 0 ? true : false; \r\n        return select;\r\n      },\r\n      isDisabled() {\r\n        return this.token && this.beforeBuy;\r\n      }\r\n  },\r\n    methods: {\r\n      editProduct() {\r\n        this.$router.push('/products/' + this.$route.params.id + '/edit');\r\n      },\r\n      deleteProduct() {\r\n        if(confirm('정말 삭제하시겠습니까?') == true) {\r\n          this.$http.delete('/api/products/' + this.$route.params.id)\r\n          .then((response) => {\r\n            if(response.data.result == 'success') {\r\n              alert('삭제 성공했습니다.');\r\n              this.$router.push('/products');\r\n            } else if(response.data.result == 'fail') {\r\n              alert('삭제 실패했습니다.')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            alert(error)\r\n          })\r\n        }\r\n      },\r\n      likeProduct() {\r\n        if(!this.token) {\r\n          alert('로그인이 필요합니다.');\r\n        } else {\r\n          this.$http.post('/api/products/' + this.$route.params.id + '/like', {userid: this.$store.getters.token})\r\n          .then((response) => {\r\n            this.likes = response.data;\r\n            this.likeTrue = !this.likeTrue;\r\n          })\r\n        }\r\n      },\r\n      basketProduct() {\r\n        if(!this.token) {\r\n          alert('로그인이 필요합니다.');\r\n        } else {\r\n          this.$http.post('/api/login/' + this.$route.params.id + '/basket', {userid: this.$store.getters.token})\r\n          .then((response) => {\r\n            for(var i in response.data){\r\n              if(response.data[i] == this.$route.params.id) {\r\n                alert(\"찜목록에 추가합니다.\");\r\n                this.basketTrue = true;\r\n                return;\r\n               }\r\n            }\r\n            alert(\"찜목록에서 삭제합니다.\");\r\n            this.basketTrue = false; \r\n          })\r\n        }\r\n      },\r\n      createComment() {\r\n        this.$router.push('/products/' + this.$route.params.id + '/comments/new');\r\n      },\r\n      editComment(comment) {\r\n        this.$router.push('/products/' + this.$route.params.id + '/comments/' + comment._id +'/edit')\r\n      },\r\n\r\n      deleteComment(comment) {\r\n        let id = this.$route.params.id;\r\n        this.$http.delete('/api/products/'+ this.$route.params.id + '/comments/' + comment._id)\r\n        .then((response) => {\r\n          if(response.data.result == 'success') {\r\n            alert('삭제 성공했습니다.');\r\n            this.$router.push('/products');\r\n          } else if(response.data.result == 'fail') {\r\n            alert('삭제 실패했습니다.')\r\n          }\r\n        })\r\n        .catch(error => {\r\n          alert(error)\r\n        })\r\n      },\r\n      buy() {\r\n        if(!this.token) {\r\n          alert('로그인이 필요합니다.');\r\n        } else {\r\n          if(this.isDisabled == false) {\r\n            alert('옵션을 먼저 선택해주세요.');\r\n          } else {\r\n            this.SItemsNum -= this.mySItemsNum;\r\n            this.MItemsNum -= this.myMItemsNum;\r\n            this.LItemsNum -= this.myLItemsNum;\r\n            this.XLItemsNum -= this.myXLItemsNum;\r\n            this.FreeItemsNum -= this.myFreeItemsNum;\r\n\r\n            this.$http.post('/api/login/' + this.$route.params.id + '/orders', {userid: this.$store.getters.token})\r\n            .then((response) => {\r\n              this.$http.post('/api/login/' + this.$store.getters.token + '/purchaseState', {\r\n                username: this.$store.getters.username,\r\n                postcode: this.user.postcode,\r\n                roadAddress: this.user.roadAddress,\r\n                jibunAddress: this.user.jibunAddress,\r\n                detailAddress: this.user.detailAddress,\r\n                purchasePrice:this.priceSum,\r\n                productName:this.product.name,\r\n                thumbnail:this.product.thumbnail,\r\n                SItems:this.mySItemsNum,\r\n                MItems:this.myMItemsNum,\r\n                LItems:this.myLItemsNum,\r\n                XLItems:this.myXLItemsNum,\r\n                FreeItems:this.myFreeItemsNum,\r\n              })\r\n              .then((response) => {\r\n                this.$http.put('/api/products/' + this.$route.params.id + '/buy', {\r\n                  SItemsNum: this.SItemsNum, MItemsNum: this.MItemsNum, LItemsNum: this.LItemsNum, XLItemsNum: this.XLItemsNum, FreeItemsNum: this.FreeItemsNum\r\n                })\r\n                .then((response) => {\r\n                  if(response.data.result == 'fail') {\r\n                    alert('구매 실패.');\r\n                  } else {\r\n                    alert('구매 완료.');\r\n                    this.$router.push('/'+ this.$store.getters.token +'/orders');\r\n                  }\r\n                })\r\n                .catch(error => {\r\n                    alert(error);\r\n                }) \r\n              })\r\n            });\r\n          } \r\n        }       \r\n      },\r\n      upItemsNum(size) {\r\n      if(size == 's') {\r\n        if(this.SItemsNum > this.mySItemsNum) {\r\n          this.mySItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.');\r\n        }\r\n      }\r\n      if(size == 'm') {\r\n        if(this.MItemsNum > this.myMItemsNum) {\r\n          this.myMItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      if(size == 'l') {\r\n        if(this.LItemsNum > this.myLItemsNum) {\r\n          this.myLItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      if(size == 'xl') {\r\n        if(this.XLItemsNum > this.myXLItemsNum) {\r\n          this.myXLItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      if(size == 'free') {\r\n        if(this.FreeItemsNum > this.myFreeItemsNum) {\r\n          this.myFreeItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      \r\n    },\r\n    downItemsNum(size) {\r\n      if(size == 's') {\r\n        if(this.mySItemsNum > 1) {\r\n          this.mySItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'm') {\r\n        if(this.myMItemsNum > 1) {\r\n          this.myMItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'l') {\r\n        if(this.myLItemsNum > 1) {\r\n          this.myLItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'xl') {\r\n        if(this.myXLItemsNum > 1) {\r\n          this.myXLItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'free') {\r\n        if(this.myFreeItemsNum > 1) {\r\n          this.myFreeItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      \r\n    },\r\n    salesBar(size) {\r\n      if(size == 's') {\r\n        this.SSaleTrue = !this.SSaleTrue;\r\n        if(this.SSaleTrue == false) {\r\n          this.mySItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'm') {\r\n        this.MSaleTrue = !this.MSaleTrue;\r\n        if(this.MSaleTrue == false) {\r\n          this.myMItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'l') {\r\n        this.LSaleTrue = !this.LSaleTrue;\r\n        if(this.LSaleTrue == false) {\r\n          this.myLItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'xl') {\r\n        this.XLSaleTrue = !this.XLSaleTrue;\r\n        if(this.XLSaleTrue == false) {\r\n          this.myXLItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'free') {\r\n        this.FreeSaleTrue = !this.FreeSaleTrue;\r\n        if(this.FreeSaleTrue == false) {\r\n          this.myFreeItemsNum = 0;\r\n        }\r\n      }\r\n    }\r\n    }, \r\n    mounted() {\r\n      $(function(){\r\n        $.salesPosition = function() {\r\n          var num = $(window).scrollTop();\r\n          if($('.wrapper').width() >= 920){\r\n            if(num <= 100) {\r\n              $('.sales').css({top:0})\r\n            } else if(num > 100){\r\n              $('.sales').css({\r\n                top:(num-120)+'px'\r\n              })\r\n            }\r\n          } else {\r\n            $('.sales').css({top:0})\r\n          }\r\n        }\r\n        $(window).scroll(function(){\r\n          $.salesPosition();\r\n        })\r\n        $(window).resize($.debounce(100, function(){\r\n          $.salesPosition();\r\n        }))\r\n      });\r\n    },\r\n    created() {\r\n      this.$http.get('/api/products/'+ this.$route.params.id)\r\n      .then((response) => {\r\n        this.product = response.data;\r\n        this.product.price = this.product.price.replace(',','');\r\n        this.likes = response.data.likes;\r\n        this.SItemsNum = response.data.SItems;\r\n        this.MItemsNum = response.data.MItems;\r\n        this.LItemsNum = response.data.LItems;\r\n        this.XLItemsNum = response.data.XLItems;\r\n        this.FreeItemsNum = response.data.FreeItems;\r\n        for(var i in response.data.likes) {\r\n          if(response.data.likes[i]._id == this.$store.getters.token) {\r\n            this.likeTrue = true;\r\n          }\r\n        }\r\n      }),\r\n      this.$http.get('/api/login/' + this.$store.getters.token + '/myPage')\r\n      .then((response) => {\r\n        this.user = response.data;\r\n        for(var i in response.data.basket) {\r\n          if(response.data.basket[i] == this.$route.params.id) {\r\n            this.basketTrue = true;\r\n          }\r\n        }\r\n      })\r\n    }\r\n}\r\n",{"version":3,"sources":["DetailsPage.vue"],"names":[],"mappingsfile":"DetailsPage.vue","sourceRoot":"src/components/products","sourcesContent":["<template>\r\n  <div class=\"container\" id=\"detail\">\r\n    <div class=\"header\">\r\n      <h1>Details page</h1>\r\n      <button v-if=\"isAdmin\" @click=\"editProduct\" class=\"btn btn-default\">수정</button>\r\n      <button v-if=\"isAdmin\" @click=\"deleteProduct\" class=\"btn btn-default\" style=\"margin-left:5px\">삭제</button>\r\n      <hr>\r\n    </div>\r\n    <div class=\"wrapper\">\r\n      <div class=\"contents\">\r\n        <img v-bind:src=\"product.detailed_image\" alt=\"detail images\">\r\n        <hr>\r\n        <button :disabled=\"!token\" @click=\"createComment\" class=\"btn btn-default\">후기 작성</button>\r\n        <div class=\"comments\">\r\n            <div v-for=\"comment in product.comments\">\r\n              <strong>{{comment.author.nickname}}</strong>\r\n              <p>{{comment.text}}</p>       \r\n                <button v-if=\"comment.author.id == token\" @click=\"editComment(comment)\" class=\"btn btn-default\">수정</button>\r\n                <button v-if=\"comment.author.id == token || isAdmin\" @click=\"deleteComment(comment)\" class=\"btn btn-default\">삭제</button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"sales\">\r\n        <strong class=\"name\">{{product.name}}</strong>\r\n        <p class=\"price\">KRW {{product.price}}</p>\r\n        <button v-if=\"SItemsNum > 0\" class=\"size\" @click=\"salesBar(S)\">S</button>\r\n        <button v-if=\"MItemsNum > 0\" class=\"size\" @click=\"salesBar(M)\">M</button>\r\n        <button v-if=\"LItemsNum > 0\" class=\"size\" @click=\"salesBar(L)\">L</button>\r\n        <button v-if=\"XLItemsNum > 0\" class=\"size\" @click=\"salesBar(XL)\">XL</button>\r\n        <button v-if=\"FreeItemsNum > 0\" class=\"size\" @click=\"salesBar(Free)\">Free</button>\r\n        <p class=\"sale\" v-if=\"SSaleTrue\">S구매 수량 : {{mySItemsNum}}  \r\n        <button @click=\"upItemsNum(S)\" class=\"num\">Up</button>\r\n        <button @click=\"downItemsNum(S)\" class=\"num\">Down</button></p>\r\n        <p class=\"sale\" v-if=\"MSaleTrue\">M구매 수량 : {{myMItemsNum}}  \r\n        <button @click=\"upItemsNum(M)\" class=\"num\">Up</button>\r\n        <button @click=\"downItemsNum(M)\" class=\"num\">Down</button></p>\r\n\r\n        <p class=\"sale\" v-if=\"LSaleTrue\">L구매 수량 : {{myLItemsNum}}  \r\n        <button @click=\"upItemsNum(L)\" class=\"num\">Up</button>\r\n        <button @click=\"downItemsNum(L)\" class=\"num\">Down</button></p>\r\n        <p class=\"sale\" v-if=\"XLSaleTrue\">XL구매 수량 : {{myXLItemsNum}}  \r\n        <button @click=\"upItemsNum(XL)\" class=\"num\">Up</button>\r\n        <button @click=\"downItemsNum(XL)\" class=\"num\">Down</button></p>\r\n\r\n        <p class=\"sale\" v-if=\"FreeSaleTrue\">Free구매 수량 : {{myFreeItemsNum}}  \r\n        <button @click=\"upItemsNum(Free)\" class=\"num\">Up</button>\r\n        <button @click=\"downItemsNum(Free)\" class=\"num\">Down</button></p>\r\n\r\n        <p v-if=\"priceSum !=0\" class=\"sum\">총 {{priceSum}}원</p>\r\n\r\n        <button @click=\"likeProduct\" class=\"like\" :class=\"{likeBtn: likeTrue}\">like({{likes.length}})</button>\r\n        <button @click=\"basketProduct\" class=\"basket\" :class=\"{likeBtn: basketTrue}\">찜하기</button>\r\n        <button @click=\"buy\" class=\"buy\">구매하기</button>\r\n      </div>\r\n    </div> \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: function () {\r\n      return {\r\n        product: {\r\n          price:0\r\n        },\r\n        user: {},\r\n        likes: [],\r\n        basket: [],\r\n        likeTrue: null,\r\n        basketTrue: null,\r\n        S:'s', M:'m', L:'l', XL:'xl', Free:'free',\r\n        mySItemsNum: 0, myMItemsNum: 0, myLItemsNum: 0, myXLItemsNum: 0, myFreeItemsNum: 0,\r\n        SSaleTrue: false, MSaleTrue: false, LSaleTrue: false, XLSaleTrue: false, FreeSaleTrue: false,\r\n        //DB에 저장된 갯수 담을 변수\r\n        SItemsNum:null, MItemsNum:null, LItemsNum:null, XLItemsNum:null, FreeItemsNum:null\r\n      }\r\n  },\r\n  computed: {\r\n      isAdmin() {\r\n          return this.$store.getters.isAdmin;\r\n      },\r\n      token() {\r\n        return this.$store.getters.token;\r\n      },\r\n      priceSum() {\r\n        return (Number(this.product.price) * (this.mySItemsNum + this.myMItemsNum + this.myLItemsNum + this.myXLItemsNum + this.myFreeItemsNum)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n      },\r\n      beforeBuy() {\r\n        let select = this.mySItemsNum != 0 || this.myMItemsNum != 0 || this.myLItemsNum != 0 || this.myXLItemsNum != 0 || this.myFreeItemsNum != 0 ? true : false; \r\n        return select;\r\n      },\r\n      isDisabled() {\r\n        return this.token && this.beforeBuy;\r\n      }\r\n  },\r\n    methods: {\r\n      editProduct() {\r\n        this.$router.push('/products/' + this.$route.params.id + '/edit');\r\n      },\r\n      deleteProduct() {\r\n        if(confirm('정말 삭제하시겠습니까?') == true) {\r\n          this.$http.delete('/api/products/' + this.$route.params.id)\r\n          .then((response) => {\r\n            if(response.data.result == 'success') {\r\n              alert('삭제 성공했습니다.');\r\n              this.$router.push('/products');\r\n            } else if(response.data.result == 'fail') {\r\n              alert('삭제 실패했습니다.')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            alert(error)\r\n          })\r\n        }\r\n      },\r\n      likeProduct() {\r\n        if(!this.token) {\r\n          alert('로그인이 필요합니다.');\r\n        } else {\r\n          this.$http.post('/api/products/' + this.$route.params.id + '/like', {userid: this.$store.getters.token})\r\n          .then((response) => {\r\n            this.likes = response.data;\r\n            this.likeTrue = !this.likeTrue;\r\n          })\r\n        }\r\n      },\r\n      basketProduct() {\r\n        if(!this.token) {\r\n          alert('로그인이 필요합니다.');\r\n        } else {\r\n          this.$http.post('/api/login/' + this.$route.params.id + '/basket', {userid: this.$store.getters.token})\r\n          .then((response) => {\r\n            for(var i in response.data){\r\n              if(response.data[i] == this.$route.params.id) {\r\n                alert(\"찜목록에 추가합니다.\");\r\n                this.basketTrue = true;\r\n                return;\r\n               }\r\n            }\r\n            alert(\"찜목록에서 삭제합니다.\");\r\n            this.basketTrue = false; \r\n          })\r\n        }\r\n      },\r\n      createComment() {\r\n        this.$router.push('/products/' + this.$route.params.id + '/comments/new');\r\n      },\r\n      editComment(comment) {\r\n        this.$router.push('/products/' + this.$route.params.id + '/comments/' + comment._id +'/edit')\r\n      },\r\n\r\n      deleteComment(comment) {\r\n        let id = this.$route.params.id;\r\n        this.$http.delete('/api/products/'+ this.$route.params.id + '/comments/' + comment._id)\r\n        .then((response) => {\r\n          if(response.data.result == 'success') {\r\n            alert('삭제 성공했습니다.');\r\n            this.$router.push('/products');\r\n          } else if(response.data.result == 'fail') {\r\n            alert('삭제 실패했습니다.')\r\n          }\r\n        })\r\n        .catch(error => {\r\n          alert(error)\r\n        })\r\n      },\r\n      buy() {\r\n        if(!this.token) {\r\n          alert('로그인이 필요합니다.');\r\n        } else {\r\n          if(this.isDisabled == false) {\r\n            alert('옵션을 먼저 선택해주세요.');\r\n          } else {\r\n            this.SItemsNum -= this.mySItemsNum;\r\n            this.MItemsNum -= this.myMItemsNum;\r\n            this.LItemsNum -= this.myLItemsNum;\r\n            this.XLItemsNum -= this.myXLItemsNum;\r\n            this.FreeItemsNum -= this.myFreeItemsNum;\r\n\r\n            this.$http.post('/api/login/' + this.$route.params.id + '/orders', {userid: this.$store.getters.token})\r\n            .then((response) => {\r\n              this.$http.post('/api/login/' + this.$store.getters.token + '/purchaseState', {\r\n                username: this.$store.getters.username,\r\n                postcode: this.user.postcode,\r\n                roadAddress: this.user.roadAddress,\r\n                jibunAddress: this.user.jibunAddress,\r\n                detailAddress: this.user.detailAddress,\r\n                purchasePrice:this.priceSum,\r\n                productName:this.product.name,\r\n                thumbnail:this.product.thumbnail,\r\n                SItems:this.mySItemsNum,\r\n                MItems:this.myMItemsNum,\r\n                LItems:this.myLItemsNum,\r\n                XLItems:this.myXLItemsNum,\r\n                FreeItems:this.myFreeItemsNum,\r\n              })\r\n              .then((response) => {\r\n                this.$http.put('/api/products/' + this.$route.params.id + '/buy', {\r\n                  SItemsNum: this.SItemsNum, MItemsNum: this.MItemsNum, LItemsNum: this.LItemsNum, XLItemsNum: this.XLItemsNum, FreeItemsNum: this.FreeItemsNum\r\n                })\r\n                .then((response) => {\r\n                  if(response.data.result == 'fail') {\r\n                    alert('구매 실패.');\r\n                  } else {\r\n                    alert('구매 완료.');\r\n                    this.$router.push('/'+ this.$store.getters.token +'/orders');\r\n                  }\r\n                })\r\n                .catch(error => {\r\n                    alert(error);\r\n                }) \r\n              })\r\n            });\r\n          } \r\n        }       \r\n      },\r\n      upItemsNum(size) {\r\n      if(size == 's') {\r\n        if(this.SItemsNum > this.mySItemsNum) {\r\n          this.mySItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.');\r\n        }\r\n      }\r\n      if(size == 'm') {\r\n        if(this.MItemsNum > this.myMItemsNum) {\r\n          this.myMItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      if(size == 'l') {\r\n        if(this.LItemsNum > this.myLItemsNum) {\r\n          this.myLItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      if(size == 'xl') {\r\n        if(this.XLItemsNum > this.myXLItemsNum) {\r\n          this.myXLItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      if(size == 'free') {\r\n        if(this.FreeItemsNum > this.myFreeItemsNum) {\r\n          this.myFreeItemsNum++;\r\n        } else {\r\n          alert('최대 수량을 초과하였습니다.')\r\n        }\r\n      }\r\n      \r\n    },\r\n    downItemsNum(size) {\r\n      if(size == 's') {\r\n        if(this.mySItemsNum > 1) {\r\n          this.mySItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'm') {\r\n        if(this.myMItemsNum > 1) {\r\n          this.myMItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'l') {\r\n        if(this.myLItemsNum > 1) {\r\n          this.myLItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'xl') {\r\n        if(this.myXLItemsNum > 1) {\r\n          this.myXLItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      if(size == 'free') {\r\n        if(this.myFreeItemsNum > 1) {\r\n          this.myFreeItemsNum--;\r\n        } else {\r\n          alert('최소 수량입니다.')\r\n        }\r\n      }\r\n      \r\n    },\r\n    salesBar(size) {\r\n      if(size == 's') {\r\n        this.SSaleTrue = !this.SSaleTrue;\r\n        if(this.SSaleTrue == false) {\r\n          this.mySItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'm') {\r\n        this.MSaleTrue = !this.MSaleTrue;\r\n        if(this.MSaleTrue == false) {\r\n          this.myMItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'l') {\r\n        this.LSaleTrue = !this.LSaleTrue;\r\n        if(this.LSaleTrue == false) {\r\n          this.myLItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'xl') {\r\n        this.XLSaleTrue = !this.XLSaleTrue;\r\n        if(this.XLSaleTrue == false) {\r\n          this.myXLItemsNum = 0;\r\n        }\r\n      }\r\n      if(size == 'free') {\r\n        this.FreeSaleTrue = !this.FreeSaleTrue;\r\n        if(this.FreeSaleTrue == false) {\r\n          this.myFreeItemsNum = 0;\r\n        }\r\n      }\r\n    }\r\n    }, \r\n    mounted() {\r\n      $(function(){\r\n        $.salesPosition = function() {\r\n          var num = $(window).scrollTop();\r\n          if($('.wrapper').width() >= 920){\r\n            if(num <= 100) {\r\n              $('.sales').css({top:0})\r\n            } else if(num > 100){\r\n              $('.sales').css({\r\n                top:(num-120)+'px'\r\n              })\r\n            }\r\n          } else {\r\n            $('.sales').css({top:0})\r\n          }\r\n        }\r\n        $(window).scroll(function(){\r\n          $.salesPosition();\r\n        })\r\n        $(window).resize($.debounce(100, function(){\r\n          $.salesPosition();\r\n        }))\r\n      });\r\n    },\r\n    created() {\r\n      this.$http.get('/api/products/'+ this.$route.params.id)\r\n      .then((response) => {\r\n        this.product = response.data;\r\n        this.product.price = this.product.price.replace(',','');\r\n        this.likes = response.data.likes;\r\n        this.SItemsNum = response.data.SItems;\r\n        this.MItemsNum = response.data.MItems;\r\n        this.LItemsNum = response.data.LItems;\r\n        this.XLItemsNum = response.data.XLItems;\r\n        this.FreeItemsNum = response.data.FreeItems;\r\n        for(var i in response.data.likes) {\r\n          if(response.data.likes[i]._id == this.$store.getters.token) {\r\n            this.likeTrue = true;\r\n          }\r\n        }\r\n      }),\r\n      this.$http.get('/api/login/' + this.$store.getters.token + '/myPage')\r\n      .then((response) => {\r\n        this.user = response.data;\r\n        for(var i in response.data.basket) {\r\n          if(response.data.basket[i] == this.$route.params.id) {\r\n            this.basketTrue = true;\r\n          }\r\n        }\r\n      })\r\n    }\r\n}\r\n</script>\r\n\r\n<style src=\"../../../public/stylesheets/products.css\">\r\n</style>"]}]}
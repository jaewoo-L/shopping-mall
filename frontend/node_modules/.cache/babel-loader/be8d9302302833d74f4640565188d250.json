{"remainingRequest":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\gksmf\\shopping_mall\\frontend\\src\\store\\store.js","dependencies":[{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\src\\store\\store.js","mtime":1570613129228},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\gksmf\\shopping_mall\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//vuex 를 사용하기위해서는 npm install --save vuex 패키지를 설치한다.\n//store.js 가 center store\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport var store = new Vuex.Store({\n  //응용 프로그램의 모든 속성을 저장할 수 있는 객체입니다.\n  state: {\n    username: null,\n    token: null,\n    isAdmin: null\n  },\n  //데이터 중복을 막기위해 함수를 한곳에 모으고 중복을 최소화한다.\n  getters: {\n    username: function username(state) {\n      return state.username;\n    },\n    isAuthenticated: function isAuthenticated(state) {\n      return state.token !== null;\n    },\n    isAdmin: function isAdmin(state) {\n      return state.isAdmin == 'true';\n    },\n    token: function token(state) {\n      return state.token;\n    }\n  },\n  //state 를 변경할 때도 동일한 문제가 생길 수 있다. 그래서 Mutations 를 이용할 수 있다. 상태(state)를 변경하고 저장한다.\n  //mutations 은 항상 동기적이다. 비동기활동(setTimeout() 사용이 안된다.) 그렇다면 비동기작업을 수행하게 하려면 어떻게 해야할까. Actions 을통해 요소와 mutations 사이에서  문제를 해결.\n  //mutations.js 를 export해서 이용.\n  mutations: {\n    clearAuthData: function clearAuthData(state) {\n      state.username = null;\n      state.token = null;\n      state.isAdmin = null;\n    },\n    authUser: function authUser(state, userData) {\n      //토큰을 vuex에 저장하지만 vuex역시 js파일이기 때문에 새로고침하면 손실된다. 그래서 로그인 유지가 불가능하다.\n      //우리는 브라우저 API를 통해 토큰을 저장하여 로그인을 유지한다. localStorage 이다.\n      state.token = userData.token;\n      state.username = userData.username;\n      state.isAdmin = userData.isAdmin;\n    }\n  },\n  //Actions 이용 ./actioins.js 에서 내보낸 값들.\n  actions: {\n    tryAutoLogin: function tryAutoLogin(_ref) {\n      var commit = _ref.commit;\n      var token = localStorage.getItem(\"access_token\");\n      var username = localStorage.getItem(\"username\");\n      var isAdmin = localStorage.getItem(\"isAdmin\");\n\n      if (!token) {\n        return;\n      }\n\n      commit('authUser', {\n        token: token,\n        username: username,\n        isAdmin: isAdmin\n      });\n    },\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      commit('clearAuthData');\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"isAdmin\");\n    }\n  }\n});",{"version":3,"sources":["C:\\Users\\gksmf\\shopping_mall\\frontend\\src\\store\\store.js"],"names":["Vue","Vuex","use","store","Store","state","username","token","isAdmin","getters","isAuthenticated","mutations","clearAuthData","authUser","userData","actions","tryAutoLogin","commit","localStorage","getItem","logout","removeItem"],"mappings":"AAAA;AACA;AACA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,OAAO,IAAME,KAAK,GAAG,IAAIF,IAAI,CAACG,KAAT,CAAe;AACnC;AACAC,EAAAA,KAAK,EAAE;AACNC,IAAAA,QAAQ,EAAE,IADJ;AAENC,IAAAA,KAAK,EAAC,IAFA;AAGNC,IAAAA,OAAO,EAAE;AAHH,GAF4B;AAOnC;AACAC,EAAAA,OAAO,EAAE;AACRH,IAAAA,QAAQ,EAAE,kBAAAD,KAAK,EAAI;AAClB,aAAOA,KAAK,CAACC,QAAb;AACA,KAHO;AAIRI,IAAAA,eAAe,EAAE,yBAAAL,KAAK,EAAI;AACzB,aAAOA,KAAK,CAACE,KAAN,KAAgB,IAAvB;AACA,KANO;AAORC,IAAAA,OAAO,EAAE,iBAAAH,KAAK,EAAI;AACjB,aAAOA,KAAK,CAACG,OAAN,IAAiB,MAAxB;AACA,KATO;AAURD,IAAAA,KAAK,EAAE,eAAAF,KAAK,EAAI;AACf,aAAOA,KAAK,CAACE,KAAb;AACA;AAZO,GAR0B;AAsBnC;AACA;AACA;AACAI,EAAAA,SAAS,EAAE;AACVC,IAAAA,aADU,yBACKP,KADL,EACY;AAClBA,MAAAA,KAAK,CAACC,QAAN,GAAiB,IAAjB;AACAD,MAAAA,KAAK,CAACE,KAAN,GAAc,IAAd;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAgB,IAAhB;AACA,KALM;AAMVK,IAAAA,QANU,oBAMDR,KANC,EAMMS,QANN,EAMgB;AACtB;AACA;AACDT,MAAAA,KAAK,CAACE,KAAN,GAAcO,QAAQ,CAACP,KAAvB;AACAF,MAAAA,KAAK,CAACC,QAAN,GAAiBQ,QAAQ,CAACR,QAA1B;AACAD,MAAAA,KAAK,CAACG,OAAN,GAAgBM,QAAQ,CAACN,OAAzB;AACA;AAZO,GAzBwB;AAuCnC;AACAO,EAAAA,OAAO,EAAE;AACPC,IAAAA,YADO,8BACgB;AAAA,UAATC,MAAS,QAATA,MAAS;AACtB,UAAMV,KAAK,GAAGW,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAd;AACG,UAAMb,QAAQ,GAAGY,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;AACA,UAAMX,OAAO,GAAGU,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAhB;;AACA,UAAI,CAACZ,KAAL,EAAY;AACV;AACD;;AACDU,MAAAA,MAAM,CAAC,UAAD,EAAY;AAACV,QAAAA,KAAK,EAAEA,KAAR;AAAeD,QAAAA,QAAQ,EAAEA,QAAzB;AAAmCE,QAAAA,OAAO,EAAEA;AAA5C,OAAZ,CAAN;AACD,KATI;AAULY,IAAAA,MAVK,yBAUY;AAAA,UAATH,MAAS,SAATA,MAAS;AACfA,MAAAA,MAAM,CAAC,eAAD,CAAN;AACAC,MAAAA,YAAY,CAACG,UAAb,CAAwB,cAAxB;AACAH,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACAH,MAAAA,YAAY,CAACG,UAAb,CAAwB,SAAxB;AACD;AAfI;AAxC0B,CAAf,CAAd","sourcesContent":["//vuex 를 사용하기위해서는 npm install --save vuex 패키지를 설치한다.\r\n//store.js 가 center store\r\nimport Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\n\r\nVue.use(Vuex);\r\n\r\nexport const store = new Vuex.Store({\r\n\t//응용 프로그램의 모든 속성을 저장할 수 있는 객체입니다.\r\n\tstate: {\r\n\t\tusername: null,\r\n\t\ttoken:null,\r\n\t\tisAdmin: null\r\n\t},\r\n\t//데이터 중복을 막기위해 함수를 한곳에 모으고 중복을 최소화한다.\r\n\tgetters: {\r\n\t\tusername: state => {\r\n\t\t\treturn state.username;\r\n\t\t},\r\n\t\tisAuthenticated: state => {\r\n\t\t\treturn state.token !== null\r\n\t\t},\r\n\t\tisAdmin: state => { \r\n\t\t\treturn state.isAdmin == 'true'\r\n\t\t},\r\n\t\ttoken: state => {\r\n\t\t\treturn state.token;\r\n\t\t}\r\n\t},\r\n\t//state 를 변경할 때도 동일한 문제가 생길 수 있다. 그래서 Mutations 를 이용할 수 있다. 상태(state)를 변경하고 저장한다.\r\n\t//mutations 은 항상 동기적이다. 비동기활동(setTimeout() 사용이 안된다.) 그렇다면 비동기작업을 수행하게 하려면 어떻게 해야할까. Actions 을통해 요소와 mutations 사이에서  문제를 해결.\r\n\t//mutations.js 를 export해서 이용.\r\n\tmutations: {\r\n\t\tclearAuthData (state) {\r\n\t    \tstate.username = null;\r\n\t    \tstate.token = null;\r\n\t    \tstate.isAdmin = null;\r\n\t    },\r\n\t\tauthUser(state, userData) {\r\n      //토큰을 vuex에 저장하지만 vuex역시 js파일이기 때문에 새로고침하면 손실된다. 그래서 로그인 유지가 불가능하다.\r\n      //우리는 브라우저 API를 통해 토큰을 저장하여 로그인을 유지한다. localStorage 이다.\r\n  \t\t\tstate.token = userData.token\r\n  \t\t\tstate.username = userData.username\r\n  \t\t\tstate.isAdmin = userData.isAdmin\r\n  \t\t},\r\n\t},\r\n\t//Actions 이용 ./actioins.js 에서 내보낸 값들.\r\n\tactions: {\r\n\t\t tryAutoLogin({commit}) {\r\n\t\t  const token = localStorage.getItem(\"access_token\")\r\n\t      const username = localStorage.getItem(\"username\")\r\n\t      const isAdmin = localStorage.getItem(\"isAdmin\")\r\n\t      if (!token) {\r\n\t        return\r\n\t      }   \r\n\t      commit('authUser',{token: token, username: username, isAdmin: isAdmin})\r\n\t    },\r\n\t    logout({commit}) {\r\n\t      commit('clearAuthData')\r\n\t      localStorage.removeItem(\"access_token\")\r\n\t      localStorage.removeItem(\"username\")\r\n\t      localStorage.removeItem(\"isAdmin\")\r\n\t    }\r\n\t}\r\n});"]}]}